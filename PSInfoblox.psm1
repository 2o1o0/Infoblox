<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.138
     Generated on:       10/04/2017 18:23
     Generated by:       vmoitrot
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>


<#	
	===========================================================================
	 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.138
	 Created on:   	10/04/2017 17:57
	 Created by:   	vmoitrot
	 Organization: 	
	 Filename:     	PSInfoblox.psm1
	-------------------------------------------------------------------------
	 Module Name: PSInfoblox
	===========================================================================
#>

function Get-IBNextFreeIPs
{
<#
	.SYNOPSIS
		Return X free ips in a network
	
	.DESCRIPTION
		Return X free ips in a network, 5 by default
	
	.PARAMETER APIusername
		API Username
	
	.PARAMETER APIuserpassword
		API Password
	
	.PARAMETER IBurl
		Url to infoblox appliance
	
	.PARAMETER IBapiversion
		API version
	
	.PARAMETER IPamount
		How many IPs should be returned
	
	.NOTES
		Additional information about the function.
#>
	
	[CmdletBinding()]
	[OutputType([array])]
	param
	(
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[string]$APIusername,
		[Parameter(Mandatory = $true,
				   Position = 2)]
		[string]$APIuserpassword,
		[Parameter(Mandatory = $true,
				   HelpMessage = 'Url to your infoblox appliance like https://myinfoblox.company.com')]
		[string]$IBurl,
		[Parameter(HelpMessage = 'API version like 1.6. Default is 2.0.')]
		[string]$IBapiversion = "2.0",
		[Parameter(Position = 3)]
		[uint16]$IPamount = 5
	)
	
	DynamicParam
	{
		$IBapiurl = $IBurl.ToString() + "/wapi/v" + $IBapiversion
		
		$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $IBapiuser, $IBapipwd)))
		$Headers = @{ Authorization = ("Basic {0}" -f $base64AuthInfo) }
		
		
		# Set the dynamic parameters' name
		$ParameterName = 'network'
		
		# Create the dictionary 
		$RuntimeParameterDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
		
		# Create the collection of attributes
		$AttributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]
		
		# Create and set the parameters' attributes
		$ParameterAttribute = New-Object System.Management.Automation.ParameterAttribute
		$ParameterAttribute.Mandatory = $true
		$ParameterAttribute.Position = 1
		
		# Add the attributes to the attributes collection
		$AttributeCollection.Add($ParameterAttribute)
		
		# Generate and set the ValidateSet 
		$IBapiurl = $IBurl + "/wapi/v" + $IBapiversion
		$arrSet = (Invoke-RestMethod -Method Get -Uri "$IBapiurl/network" -Headers $Headers).network
		$ValidateSetAttribute = New-Object System.Management.Automation.ValidateSetAttribute($arrSet)
		
		# Add the ValidateSet to the attributes collection
		$AttributeCollection.Add($ValidateSetAttribute)
		
		# Create and return the dynamic parameter
		$RuntimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($ParameterName, [string], $AttributeCollection)
		$RuntimeParameterDictionary.Add($ParameterName, $RuntimeParameter)
		return $RuntimeParameterDictionary
	}
	begin
	{
		# Bind the parameter to a friendly variable
		$network = $PsBoundParameters[$ParameterName]
	}
	
	process
	{
		
		$IBapiurl = $IBurl + "/wapi/v" + $IBapiversion
		
		$data = @{
			"num" = $IPamount
		}
		$networkdetails = Invoke-RestMethod -Method Get -Uri "$IBapiurl/network?network=$network" -Headers $Headers
		$networkref = $networkdetails._ref.replace("/default", "")
		
		(Invoke-RestMethod -Method post -Uri "$IBapiurl/$($networkref)?_function=next_available_ip" -body $($data | ConvertTo-Json) -ContentType "application/json" -UseDefaultCredentials).ips
	}
}

function New-IBRecord
{
<#
	.SYNOPSIS
		Create new record
	
	.DESCRIPTION
		Can create new host, cname and A records
	
	.PARAMETER APIusername
		API Username
	
	.PARAMETER APIuserpassword
		API Password
	
	.PARAMETER recordtype
		A description of the recordtype parameter.
	
	.PARAMETER IBurl
		Url to infoblox appliance
	
	.PARAMETER IBapiversion
		API version
	
	.PARAMETER FQDN
		Full Qualified Domain Name for the record
	
	.PARAMETER ipaddress
		IP Address for the record
	
	.PARAMETER aliases
		Aliases for the host record
	
	.PARAMETER macaddress
		Mac Address for the record
	
	.PARAMETER dhcp
		Enable DHCP lease on this record
	
	.PARAMETER comment
		Add comment on this record
	
	.NOTES
		Additional information about the function.
#>
	
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$APIusername,
		[Parameter(Mandatory = $true)]
		[string]$APIuserpassword,
		[Parameter(Mandatory = $true)]
		[ValidateSet('A', 'HOST', 'FixedAddress')]
		[string]$recordtype,
		[Parameter(HelpMessage = 'Url to your infoblox appliance like https://myinfoblox.company.com')]
		[uri]$IBurl,
		[Parameter(HelpMessage = 'API version like 1.6. Default is 2.0.')]
		[string]$IBapiversion = "2.0",
		[Parameter(ParameterSetName = 'A',
				   Mandatory = $true)]
		[Parameter(ParameterSetName = 'Host')]
		[string]$FQDN,
		[Parameter(ParameterSetName = 'FixedAddress',
				   Mandatory = $true)]
		[Parameter(ParameterSetName = 'A')]
		[Parameter(ParameterSetName = 'Host')]
		[ipaddress]$ipaddress,
		[Parameter(ParameterSetName = 'Host')]
		[array]$aliases,
		[Parameter(ParameterSetName = 'FixedAddress')]
		[Parameter(ParameterSetName = 'Host')]
		[string]$macaddress,
		[Parameter(ParameterSetName = 'Host')]
		[boolean]$dhcp,
		[string]$comment
	)
	
	$IBapiurl = $IBurl.ToString() + "/wapi/v" + $IBapiversion
	
	$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $IBapiuser, $IBapipwd)))
	$Headers = @{ Authorization = ("Basic {0}" -f $base64AuthInfo) }
	
	$hostrequest = Invoke-RestMethod -Method Get -Uri "$IBapiurl/record:host?name=$FQDN" -Headers $Headers
	
	if (!$hostrequest)
	{
		switch ($recordtype)
		{
			'A' {
				$uri = "$IBapiurl/record:a"
				$databody = @{
					ipv4addr = $ipaddress.IPAddressToString
					name = $FQDN
				}
			}
			'FixedAddress' {
				$uri = "$IBapiurl/fixedaddress"
				$databody = @{
					ipv4addr = $ipaddress.IPAddressToString
					mac = $macaddress
				}
			}
			'HOST' {
				$uri = "$IBapiurl/record:host"
				$ipv4addrs = @()
				$ipv4addrs += @{
					ipv4addr = $ipaddress.IPAddressToString
					mac = $macaddress
					configure_for_dhcp = $dhcp
				}
				$databody = @{
					ipv4addrs = $ipv4addrs
					name = $FQDN
				}
				if ($aliases)
				{
					$databody.Add("aliases", $aliases)
				}
			}
		}
		
		if ($comment)
		{ $databody.Add('comment', $comment) }
		
		Invoke-RestMethod -Method post -Uri $uri -body $( ,$databody | ConvertTo-Json -Depth 3) -ContentType "application/json" -Headers $Headers
	}
	else
	{
		Write-Error "$FQDN already exit"
		Write-Error $($hostrequest | ft | Out-String)
	}
}

Export-ModuleMember -Function New-IBRecord



